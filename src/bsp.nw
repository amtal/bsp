\documentclass{article}
\usepackage{noweb}
\pagestyle{noweb}
\usepackage{graphicx}

\title{BSP Trees in Erlang}
\author{Alex Kropivny}
\begin{document}
\maketitle

\tableofcontents


\noweboptions{smallcode}

\section{Introduction}

There is an age old problem in immutable languages: how do I mutate a piece of a huge chunk of data, without copying the whole thing?

The answer is trees. The problem came up again recently, in an Erlang IRC channel, with respect to a Minecraft server. The game stores a massive amount of often-mutated data in a 3D grid. It highlighted a potential gap in existing libraries: multiple solutions were proposed, but all felt a little off.

A new data structure is required. It must support:

\begin{itemize}
\item Integer indexes in multiple dimensions, for bulk XYZ storage.
\item Efficient storage of localy repetitive data, which there'll be lots of.
\item Regular simple bulk queries, for dumping data to newly connected clients.
\item Occasional point mutation, for live world editing.
\item Infrequent flexible queries that filter and transform the data into simpler forms, for building fundamental pathing, physics, and lighting data structures.
\end{itemize}

I'd also like it to be infinite, and support declarative, comonad-like transformations... But without laziness, that abstraction is probably best left to a higher level.

The structure I'm implementing is a trivial binary space partitioned tree constructed from list cons cells. It is efficient to update, simple to implement, and has some very interesting properties for integer indexing and transformations.

The library is implemented in Lisp Flavored Erlang for simplicity and development speed. It is documented via Knuth's literate programming to clarify and explain some of the algorithms and design choices.

\section{Files}

Brief usage documentation is in a Github README, with detailed documentation generated into a PDF.

<<../README.md>>=
<<Intro docs>>

Building
========
<<Building docs>>

Viewing
=======
<<Viewing docs>>

Transforming
============
<<Transforming docs>>
@

All code is one module.

<<bsp.lfe>>=
;;; Code automatically generated from bsp.nw literate program. Go read the PDF
;;; generated alongside, instead of this commentless soup. The following isn't
;;; meant for human consumption!
(include-lib "lfe_utils/include/all.lfe")
(defmodule bsp
  (using lists)
  (export <<Exports>>))

;; Vector manipulation:
<<Vectors>>

;; General utilities:
<<Utilities>>

;; BSP tree manipulation:
<<Functions>>
@

\section{Vectors}

We need a vector data type. Since there are no Erlang vector libraries that I'm aware of, I'm making my own. It conforms to good Erlang practice, and will be compatible with any good 3rd party code that pops up.

The BSP trees we're concerned with are trivial ones, where the volume being partitioned is always split exactly in half. Their structures have a nifty relation to the bits in the integer index of the volume being partitioned, which we'll take advantage of.

It's worth underlining that Erlang integers have no upper bound, and can easily be converted to binaries and back. They are a very flexible data type.

<<Intro docs>>=
Tagged tuples of integers are used as coordinate and size vectors. Tag and size
are up to you: {vec3,0,1,0} and {addr,192,168,1,1} are valid 3 and 4 dimensional
vectors.  Each tree should only contain one type of vector. Mixing things like
{cartesian,0,1} and {polar,1,90} won't work.

```erlang
-type vector(N) :: {term(),integer(),...} when N==size(Tuple)-1.
```
@

Starting with basic helper and sanitization functions.

<<Utilities>>=
(defn list->tup [l] (list_to_tuple l))
(defn tup->list [t] (tuple_to_list t))
@

<<Vectors>>=
; sanitize input
(defn vector? 
  [v] (when (is_tuple v))
    (lists:all (fun is_integer 1) (vec-contents v))
  [_] 'false)

; get list of integers
(defn vec-contents [v] 
  (tl (tup->list v)))

(defn make-vec [tag contents]
  (list->tup (cons tag contents)))
@

Dereferencing one split of a BSP tree is a rotation. We'll end up iterating over the vector components by repeatedly rotating the vector, and looking at only the first component.

<<Vectors>>=
; make first element last, shift rest to take its place
(defn vec-rot [v] 
  (in (list->tup (cons tag xs'))
   [xs' (++ most (list last))
    (last . most) xs
    (tag . xs) (tup->list v)]))

; same, but overwrite first element
(defn vec-rot-with [x v]
  (in (list->tup (cons tag xs'))
   [xs' (++ (tl xs) (list x))
    (tag . xs) (tup->list v)]))

; first vector element ('x')
(defn 1st-el [v] (element 2 v))
@

Alternatively, an index into the vector could be used.

<<Vectors>>=
(defn vec-size [v] (- (tuple_size v) 1))

; proper zero-based indexing
(defn vec-nth [n v] (element (+ n 2) v))

; overflow indexes that get too large
(defn vec-index [n v]
  (in (if (< 0 n') n' (+ size n'))
   [n' (rem n size)
    size (vec-size v)]))
@

Because trivial splits always cut volumes in exactly half, our BSP tree dimensions are restricted to powers of two.

<<Utilities>>=
; test for power of two
(defn 2^n?
  [n] (when (=< n #xff)) (2^n-byte? n)
  [n] (andalso (== 0 (band #xff n)) 
               (2^n? (bsr n 8))))

(defn 2^n-byte?
  [1]  'true [2]  'true [4]  'true [8]   'true
  [16] 'true [32] 'true [64] 'true [128] 'true
  [_] 'false)
@

<<Vectors>>=
(defn 2^n-vec? [v]
  (lists:all (fun 2^n? 1) (vec-contents v)))
@

Finally, the minimum usual operations. The size-apathetic arithmetic ones are slow, but can be optimized later as needed. (When there are benchmarks proving they're worth optimizing.) Pattern matching common (2, 3, 4d vectors) cases should be enough. Using macros to compile matches for arbitrary sizes would be fun, but probably unnecessary.

<<Vectors>>=
; construct a null vector of the same type as another
(defn null-vec [v] 
  (: erlang make_tuple (+ 1 (vec-size v)) 
                       0 
                       (list (tuple 1 (element 1 v)))))

(defn unit-hypercube? [v]
  (== v (: erlang make_tuple (+ 1 (vec-size v))
                             1
                             (list (tuple 1 (element 1 v))))))

(defn :+ (va vb) 
  (in (make-vec tag els)
   [tag (element 1 va)
    els (lists:zipwith (fun erlang + 2) 
                       (vec-contents va) 
                       (vec-contents vb))]))
@


\section{Foundations}

<<Intro docs>>=
Trees are indexed by an N-dimensional vector, and can contain anything but lists.

```erlang
-type tree(N,A)::{bsp,term(),term()} when N::integer(), A::any_but_list().
```
@



\subsection{Construction}

Let's start by constructing a tree. The minimal tree is a single homogenous volume, with power-of-two dimensions. Trees with identical dimensions are merged together to form larger trees, with merges happening sequentially through all the dimensions of the tree.

Most initial data representations are flat, and don't group together similar contents. Trees do: when constructing a tree out of flat data, we need to do lots of comparisons between branches, and merge branches into a single volume if they're both minimal and identical.

Since there are many flat data types, we'll make the constructor a higher order function. We recursively subdivide the tree into smaller ones, until they're 1x1x1 in size. Then we use the lookup function to find the value of the volume there, and move up the stack, doing comparisons and merging as we go.

<<Exports>>=
(new 2)
@

<<Building docs>>=
Ideal constructor from flat data (binaries, arrays) accessible via vector lookups.

```erlang
-spec new(Size::vector(N), Lookup::fun(vector(N))->A) -> tree(N,A).
```
@

<<Functions>>=
(defn new [size lup] 
  (if (2^n-vec? size)
    (:bsp size (build-new size (null-vec size) lup))
    (error 'badarg (list size lup))))
; where
  (defn build-new [size pos lup]
    (if (unit-hypercube? size)
      ; 1x1x1 sizes can be looked up
      (let [(volume (funcall lup pos))]
        (if (is_list volume)
          (error (tuple 'no_lists pos volume)))
        volume)
      ; larger ones must be split into two branches
      (in (if (minimal-identical-trees? left right)
            left ; merge
            (cons left right)) ; branch
       [left (build-new size' pos-left lup)
        right (build-new size' pos-right lup)
        ; cut the current axis in two
        size' (vec-rot-with (bsr (1st-el size) 1) size)
        ; position increased by an order of magnitude, with
        ; least significant bit indicating choice between
        ; left and right branches
        pos-left (vec-rot-with offset pos)
        pos-right (vec-rot-with (bor 1 offset) pos)
        offset (bsl (1st-el pos) 1)])))
  (defn minimal-identical-trees? [a b]
    (andalso (not (is_list a))
             (not (is_list b))
             (== a b)))
    
@

\subsection{Basic Accessors}

Some trivial, but indispensable functions.

<<Intro docs>>=
```erlang
-spec is_tree(term()) -> true|false.
-spec size(tree(N,A)) -> vector(N).
```

Binary space partioning merges identical regions of data, often storing less values than flat containers.

```erlang
-spec sparsity(tree(N,A)) -> {TreeCount::integer(), FlatCount::integer()}.
```
@

A flat \(N\times N\times N\) array stores \(N^3\) separate \(1\times1\times1\) volumes, but a BSP tree will group adjacent ones into power of two amalgalms. Ignoring storage overhead, a rough idea of the resulting "compression" can be had by counting stored volumes. At worst, it'll be the same count as a flat representation. At best, the contents are all identical and only one volume needs to be stored.


<<Exports>>=
(is_tree 1) (size 1) (sparsity 1)
@

The Erlang community dislikes macros almost as much as Java. However, you know what they say: when in Rome, factor out common patterns to avoid repetition!

<<Utilities>>=
(defmacro :bsp ([size data] `(tuple 'bsp ,size ,data)))
@

<<Functions>>=
(defn is_tree 
  [(:bsp size _data)] (2^n-vec? size)
  [_] 'false)

(defn size [(:bsp size _data)] size)

(defn sparsity [(:bsp size data)] 
  (tuple (count-leaves data)
         (lists:foldl (fn [a b] (* a b)) 1 (vec-contents size))))
; where
  (defn count-leaves 
    [(cons l r)] (+ (count-leaves l) (count-leaves r))
    [_] 1)
@

Maps are trivial, but important. Zipwiths are essentially maps over two structures simultaneously. They're surprisingly flexible: it is should be possible to implement efficient bulk multi-point writes using them.

<<Transforming docs>>=
Maps tend to simplify the data while keeping size the same, making it more
repetitive, thus making the tree much smaller. Mapping a tree to filter out all
non-interesting data prior to working with it, yields impressive efficiecy
gains.

```erlang
-spec map(fun(A)->B, tree(N,A)) -> tree(N,B).
```

```erlang
-spec zipwith(fun(A,B)->C, tree(N,A), tree(N,B)) -> tree(N,C).
```
@

<<Exports>>=
(map 2) (zipwith 3)
@

<<Functions>>=
(defn map [f (:bsp size data)] 
    (:bsp size (map-tree f data)))
; where
  (defn map-tree
    [f (cons l r)]
      (in (if (minimal-identical-trees? l' r') 
            l' ; tree got simplified, merge
            (cons l' r'))
       [l' (map-tree f l) 
        r' (map-tree f r)])
    [f leaf] (funcall f leaf))

(defn zipwith [f (:bsp size1 tree1) (:bsp size2 tree2)]
  (if (== size1 size2)
    (zipwith-tree f tree1 tree2)
    (error (tuple 'size_mismatch size1 size2))))
; where
  (defn zipwith-tree
    [f leaf1 leaf2] (when (not (is_list leaf1))
                          (not (is_list leaf2)))
      (let [(leaf' (funcall f leaf1 leaf2))]
        (if (is_list leaf')
          (error (tuple 'bad_leaf_no_lists leaf'))
          leaf'))
    [f tree1 tree2] 
      (in (if (minimal-identical-trees? tree1' tree2')
            tree1'
            (cons tree1' tree2'))
       [tree1' (zipwith-tree f l1 r1)
        tree2' (zipwith-tree f l2 r2)
        (l1 . r1) (fork-volume tree1)
        (l2 . r2) (fork-volume tree2)]))
  (defn fork-volume
    [(cons l r)] (cons l r)
    [leaf] (cons leaf leaf))
@


\subsection{Viewing}

Views are transformations of a complex type into a slightly simpler one. They're an information hiding abstraction. 

Here's the simplest one:

<<Viewing docs>>=
```erlang
-spec at(vector(N), tree(N,A)) -> A.
```
@

A useful one is taking a slice out of an N-dimensional tree by looking up several of its indexes, producing a lower-dimensional tree as the output. There's a trivial proof that the method I use to do it is safe, but it'll wait until I get around to transcribing my notes.

I'm not sure about the API to use: I want to be able to specify multiple axes in one slice (it's an efficient one pass operation) but have to choose between either:

\begin{enumerate}
\item Having a 'selector' vector where non-zero elements indicate which axes to remove, and a 'position' vector. (Ugly.)
\item Having just one vector, and setting elements to non-integers if slicing must be done. This breaks the previously specified vector type signature. I'd like to have simple types.
\end{enumerate}

I suppose I may as well abuse the dynamic type system.

<<Viewing docs>>=
A tree can be reduced to a lower dimension one by selecting one or more of its
indexes. You can select a single Z-slice at X=1, Y=2 from a 3D tree by doing
bsp:select({vec,1,2,undefined}, Tree).

(If all coordinates are defined, this is a point lookup and identical to
at.)

```erlang
-spec select(maybe_vector(M,N), tree(N,A) -> tree(M,A) when M<N | A when M=N.
-type maybe_vector(M,N) :: {term(),integer()|atom(),...} when 
    N==size(Tuple)-1,
    M==length([X<-Tuple, is_integer(X)]).
```
@

<<Exports>>=
(select 2) (at 2)
@

<<Functions>>=
(defn select [pos (:bsp size data)] 
  (in (if all-defined? 
        selection 
        (:bsp (drop-axes pos size) selection))
    [all-defined? (lists:all (fun is_integer 1) pos)
     selection (select-tree pos data)]))
; where
  (defn select-tree 
    [_ leaf] (when (not (is_list leaf))) leaf
    [pos tree]
      (in 'tree
       ['tree (cond ((is_atom el) ; not selecting this axis
                     (cons (select-tree pos' (car tree))
                           (select-tree pos' (cdr tree))))
                    ((== 0 (band 1 el)) ; left branch
                     (select-tree pos' (car tree)))
                    ('true  ; right branch
                     (select-tree pos' (cdr tree))))
        ; if this axis had a branch selected, pop off the index bit
        pos' (vec-rot-with (if (is_integer el) (bsr el 1) el) pos)
        el (1st-el pos)]))
  (defn drop-axes [sel vec]
    (in (list->tup (cons tag remnants))
     [tag (element 1 vec)
      ; should do this with a LC instead \/
      remnants (lists:filter (cut == 'undefined <>) marked)
      marked (lists:zipwith mark (vec-contents sel) (vec-contents vec))
      mark (fn [a _] (when (is_atom a)) 'undefined
               [_ n] n)]))
@


Having implemented select, we can cheat and use it to implement at. There's unnecessary overhead from definition checks, but that's a later optional optimization.

<<Functions>>=
(defn at [point tree] (select point tree))
@

There's a one-dimensional view I like: run length encoding.

A note on good practice: all Erlang types should, really, be atom-tagged tuples. The fact that my RLE encoding isn't is an exception because I expect it to be used immediately in some sort of list comprehension. Most of the time.

<<Viewing docs>>=

Run length encoding is a one dimensional depth-one tree with boundary rather than binary partitions.

```erlang
-spec to_rle(tree(1,A)) -> [{RunLength::integer(),A}].
```
@

<<Exports>>=
(to_rle 1)
@

This could be implemented using a foldl directly over the tree. That could end up being a useful function later, but since I don't yet have it I'll first flatten the tree to a list.

<<Functions>>=
(defn to_rle [(:bsp (tuple _ len) data)] 
  (-> (tag-lengths len data)
      lists:flatten
      rle-group))
; where
  (defn tag-lengths
    [len (cons l r)]
      (in (cons (tag-lengths len' l) (tag-lengths len' r))
        [len' (bsl len 2)])
    [len leaf] 
      (cons (tuple len leaf) '()))
  (defn rle-group [ls]
    (in (lists:reverse (lists:foldl group (car ls) (cdr ls)))
      [group (fn [(tuple len dat) (tuple total last-dat acc)]
                (if (== dat last-dat) 
                  (tuple (+ total len) last-dat acc)
                  (tuple len dat (cons (tuple total last-dat) acc))))]))
      
@

\subsection{Factoring}

Note: this is an advanced topic, that I can't implement until I better understand the problem. Ignore this subsection, it's incomplete.

Each cons cell represents a split on an axis. The axes are round robined. They are independent: so much so that an N dimensional tree can be factored into a J dimensional tree of K dimensional trees, where J+K=N.

<<Viewing docs>>=
Factor a tree into a lower-dimension tree of lower-dimension trees. Non-zero
vector elements mark dimensions to use in the top tree.

```erlang
-spec factor(Selector::vector(N), tree(N,A)) -> tree(J,tree(K,A)) when J+K=N.
```
@

<<Exports>>=
(factor 2)
@

The tree being factored to the top level, is a singleton. It branches along the dimensions specified in the selection vector, until there are no branches left. The branches are built by traversing the original tree top-down.

The contents of the branches, are trees. The inner trees are independent and varied, collected together in an accumulator as the top-level tree is built. The accumulator produces a different inner tree for each leaf of the top-level tree. 

The process can produce significant duplication between the inner trees. The inner trees no longer benefit from the structure of the top tree, thus leaking information.

<<Utilities>>=
(defn factor [axes (:bsp size data)]
  (in (:bsp outer-size (factor inner-size axes data 'acc))
   [(tuple outer-size inner-size) (partition-vec axes size)
    _ (if (/= (vec-size axes) (vec-size size))
        (error (tuple 'vector_dim_mismatch axes size)))]))
; where
  (defn factor [inner-size axes data inner] 'todo)
  (defn partition-vec [_ _] 'todo)
    
@


\section{Index}
\nowebindex
\end{document}
